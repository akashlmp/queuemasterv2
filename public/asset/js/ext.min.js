var BASE_URL = "https://queuemaster.lambetech.com/api/";
const FingerprintJS =
    "https://cdn.jsdelivr.net/npm/@fingerprintjs/fingerprintjs@3/dist/fp.min.js";
let totalDuration = 60,
    progressBar = document.getElementById("ie1np"),
    interval = 1e3,
    remainTime = 60,
    width = 0,
    timer,
    already_in = !1;
var browserDataGloble = {},
    setTimeoutLoop = 1e3;
function loadFingerprintJS() {
    return new Promise((resolve, reject) => {
        let xhr = new XMLHttpRequest();
        xhr.open("GET", FingerprintJS, !0),
            (xhr.onreadystatechange = function () {
                if (4 === xhr.readyState) {
                    if (200 === xhr.status)
                        try {
                            eval(xhr.responseText),
                                void 0 !== FingerprintJS
                                    ? resolve(FingerprintJS)
                                    : reject(
                                          Error(
                                              "FingerprintJS is undefined after evaluation"
                                          )
                                      );
                        } catch (error) {
                            reject(
                                Error(
                                    "Error evaluating FingerprintJS script: " +
                                        error.message
                                )
                            );
                        }
                    else
                        reject(
                            Error(
                                "Failed to fetch the FingerprintJS library: " +
                                    xhr.statusText
                            )
                        );
                }
            }),
            xhr.send();
    });
}
async function getFingerPrintId() {
    try {
        let e = await loadFingerprintJS(),
            t = await e.load(),
            i = await t.get(),
            s = i.visitorId;
        return s;
    } catch (r) {
        console.error("Error loading FingerprintJS:", r);
    }
}
function generateSessionId() {
    return String(Date.now());
}
function setCookie(e, t, i) {
    var s = new Date();
    s.setTime(s.getTime() + 6e4 * i);
    var r = "expires=" + s.toUTCString();
    document.cookie = `${e}=${t};${r};path=/`;
}
function getCookie(e) {
    var t = e + "=",
        i = decodeURIComponent(document.cookie).split(";");
    for (let s = 0; s < i.length; s++) {
        let r = i[s];
        for (; " " === r.charAt(0); ) r = r.substring(1);
        if (0 === r.indexOf(t)) return r.substring(t.length, r.length);
    }
    return null;
}
async function executeScript(e) {
    var t,
        i = {
            userAgent: navigator.userAgent,
            language: navigator.language,
            cookiesEnabled: navigator.cookieEnabled,
            platform: navigator.platform,
            vendor: navigator.vendor,
            browserPlugins: Array.from(navigator.plugins, (e) => ({
                name: e.name,
                filename: e.filename,
            })),
        },
        s = {
            encodedURL: window.location.href,
            timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone,
            browserLanguage: navigator.language,
            ipaddress: await fetchIPAddress(),
            deviceid: await getFingerPrintId(),
            browserTime: new Date().toLocaleTimeString(),
        },
        r = {
            connectionType: navigator.connection
                ? navigator.connection.type
                : "Connection API not supported",
            online: navigator.onLine,
            userAgentHttpHeaders: navigator.userAgent,
            mobile: /Mobile|Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(
                navigator.userAgent
            ),
            platform: navigator.platform,
        },
        o = getPerformanceMetrics();
    sendData({
        browser: i,
        miscellaneous: s,
        networkInformation: r,
        performanceMetrics: o,
        scriptAttributes: e,
        cookies: getCookies(),
    });
}
async function fetchIPAddress() {
    try {
        return (await (await fetch("https://api.ipify.org?format=json")).json())
            .ip;
    } catch (e) {
        return console.error("Error fetching IP address:", e), null;
    }
}
function getPerformanceMetrics() {
    var e = {
        navigationTiming: performance.timing.toJSON(),
        navigationType: performance.navigation.type,
        navigationRedirectCount: performance.navigation.redirectCount,
    };
    return (
        performance.memory &&
            (e.memoryUsage = {
                totalJSHeapSize: performance.memory.totalJSHeapSize,
                usedJSHeapSize: performance.memory.usedJSHeapSize,
                jsHeapSizeLimit: performance.memory.jsHeapSizeLimit,
            }),
        e
    );
}
function getCookies() {
    var e = {};
    return (
        document.cookie.split(";").forEach((t) => {
            var [i, s] = t.trim().split("=");
            e[i] = s;
        }),
        e
    );
}
function sendData(e) {
    var t = new XMLHttpRequest();
    t.open("POST", BASE_URL + "get-browser-data", !0),
        t.setRequestHeader("Content-Type", "application/json"),
        (t.onreadystatechange = function () {
            if (t.readyState === XMLHttpRequest.DONE) {
                if (200 === t.status) {
                    var i = t.responseText,
                        s = JSON.parse(i.substring(i.indexOf("{")));
                    if (1 == s.status || 10 == s.status)
                        return (
                            !1 === s.qProcessOp &&
                                (deleteCookie("qProcessOp"),
                                deleteCookie("preQueue"),
                                deleteCookie("qSessionId"),
                                deleteCookie("checkByepassStatus")),
                            !1 !== s.redirectionUrl &&
                                (window.location.href = s.redirectionUrl),
                            !1
                        );
                    if (4 == s.status) {
                        var r = getCookies();
                        !0 !== r.preQueue && setCookie("preQueue", !0, 30);
                        var o = {
                            session_id: e.cookies.qSessionId,
                            scriptAttributes: e.scriptAttributes,
                            ipaddress: e.miscellaneous.ipaddress,
                        };
                        executeQueueOpByPass(o);
                    } else if (2 == s.status) {
                        var r = getCookies();
                        !0 !== r.checkByepassStatus &&
                            setCookie("checkByepassStatus", !0, 30),
                            !0 !== r.qProcessOp &&
                                setCookie("qProcessOp", !0, 30);
                        var o = {
                            session_id: e.cookies.qSessionId,
                            scriptAttributes: e.scriptAttributes,
                            ipaddress: e.miscellaneous.ipaddress,
                        };
                        checkBypassCodeStatus(o);
                    } else {
                        if (!0 === s.qProcessOp) {
                            var r = getCookies();
                            !0 !== r.qProcessOp &&
                                setCookie("qProcessOp", !0, 30);
                        }
                        var o = {
                            session_id: e.cookies.qSessionId,
                            scriptAttributes: e.scriptAttributes,
                            ipaddress: e.miscellaneous.ipaddress,
                            deviceid: e.miscellaneous.device_id,
                        };
                        executeQueueOp(o);
                    }
                } else
                    deleteCookie("qProcessOp"),
                        deleteCookie("preQueue"),
                        deleteCookie("qSessionId"),
                        deleteCookie("checkByepassStatus");
            }
        }),
        t.send(JSON.stringify(e));
}
function deleteCookie(e) {
    document.cookie = e + "=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;";
}
function showForcePopup(e) {
    (e +=
        "<style>#iyb66 #ie1np {width: var(--progress);height: 100%;background-image: initial;background-position-x: initial;background-position-y: initial;background-size: initial;background-attachment: initial;background-origin: initial;background-clip: initial;background-repeat: repeat;transition-duration: none;transition-timing-function: none;transition-delay: none;transition-property: none;--progress: 0%;}</style>"),
        (document.documentElement.innerHTML = "");
    var t = document.createElement("div");
    (t.id = "popup-container"),
        (t.style.position = "fixed"),
        (t.style.top = "0"),
        (t.style.left = "0"),
        (t.style.width = "100%"),
        (t.style.height = "100%"),
        (t.style.backgroundColor = "rgba(0, 0, 0, 0.5)"),
        (t.style.display = "flex"),
        (t.style.justifyContent = "center"),
        (t.style.alignItems = "center");
    var i = document.createElement("div");
    (i.id = "popup-modal"),
        (i.innerHTML = e),
        (i.style.width = "100%"),
        t.appendChild(i),
        document.body.appendChild(t),
        ProgressBar();
}
function showForcePopupForForm(e) {
    document.documentElement.innerHTML = "";
    var t = document.createElement("div");
    (t.id = "popup-container"),
        (t.style.position = "fixed"),
        (t.style.top = "0"),
        (t.style.left = "0"),
        (t.style.width = "100%"),
        (t.style.height = "100%"),
        (t.style.backgroundColor = "rgba(0, 0, 0, 0.5)"),
        (t.style.display = "flex"),
        (t.style.justifyContent = "center"),
        (t.style.alignItems = "center");
    var i = document.createElement("div");
    (i.id = "popup-modal"),
        (i.innerHTML = e),
        (i.style.width = "100%"),
        t.appendChild(i),
        document.body.appendChild(t);
}
function ProgressBar() {
    progressBar = document.getElementById("ie1np");
    let e = parseInt(getCookie("progressWidth"));
    e && (width = e), (timer = setInterval(updateProgressBar, 1e3));
}
function updateProgressBar() {
    if (remainTime <= 0)
        console.log("Progress Complete! Restarting..."),
            (remainTime = totalDuration),
            (width = 0),
            progressBar.style.setProperty("--progress", "0%"),
            (progressBar.style.width = "0%");
    else {
        if (
            ((width = ((totalDuration - remainTime) / totalDuration) * 100) >
                0 &&
                (progressBar.style.setProperty("--progress", `${width}%`),
                (progressBar.style.width = `${width}%`),
                progressBar.setAttribute("aria-valuenow", width)),
            remainTime < 60)
        ) {
            let e = document.getElementById("i378h");
            e
                ? (e.innerHTML = "Few seconds left")
                : console.warn("Element with ID 'i378h' not found in the DOM.");
        } else {
            let t = document.getElementById("i378h");
            t
                ? (t.innerHTML = Math.floor(remainTime / 60) + " mins")
                : console.warn("Element with ID 'i378h' not found in the DOM.");
        }
        setCookie("progressWidth", width, 1), (remainTime -= 1);
    }
}
function updateQueueNumber(e) {
    let t = BASE_URL + "updateQueueNumber";
    fetch(t, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(e),
    })
        .then((e) => {
            if (!e.ok)
                throw Error("Network response was not ok " + e.statusText);
            return !0;
        })
        .then((e) => !1)
        .catch((e) => !1);
}
async function executeQueueOp(e) {
    var t = new XMLHttpRequest();
    t.open("POST", BASE_URL + "q-operations", !0),
        t.setRequestHeader("Content-Type", "application/json"),
        (t.onreadystatechange = function () {
            if (t.readyState === XMLHttpRequest.DONE) {
                if (200 === t.status) {
                    var i = t.responseText,
                        s = JSON.parse(i.substring(i.indexOf("{")));
                    if (0 === s.status) return !1;
                    if (2 == s.status) checkBypassCodeStatus(recursive_data);
                    else if (4 == s.status) {
                        var r = getCookies();
                        return (
                            !0 !== r.preQueue && setCookie("preQueue", !0, 30),
                            executeQueueOpByPass(e),
                            !0
                        );
                    } else if (
                        1 == s.status ||
                        6 == s.status ||
                        10 == s.status
                    ) {
                        if (!1 === s.qProcessOp) {
                            deleteCookie("qProcessOp"),
                                deleteCookie("preQueue"),
                                deleteCookie("checkByepassStatus"),
                                deleteCookie("qSessionId");
                            var r = getCookies();
                            !0 !== r.preQueue &&
                                (setCookie("same_target_flag", !0, 30),
                                deleteCookie("refreshAjax"),
                                deleteCookie("progressWidth"));
                        }
                        return (
                            setTimeout(async function () {
                                updateQueueNumber(e),
                                    !1 !== s.redirectionUrl &&
                                        (window.location.href =
                                            s.redirectionUrl);
                            }, 55e3),
                            !0
                        );
                    } else if (
                        (clearInterval(timer),
                        s.cname &&
                            "true" !== localStorage.getItem("redirectcname") &&
                            (localStorage.setItem(
                                "redirectTarget",
                                s.cname + "/"
                            ),
                            localStorage.setItem("redirectcname", "true"),
                            (window.location.href = s.cname)),
                        void 0 !== s.current_queue_pos)
                    ) {
                        !already_in &&
                            (((already_in = !0), s.max_traffic_visitor > 0)
                                ? ((totalDuration *= Math.round(
                                      s.current_queue_pos /
                                          s.max_traffic_visitor
                                  )),
                                  (remainTime = totalDuration))
                                : console.warn(
                                      "max_traffic_visitor is zero, cannot adjust totalDuration based on queue position."
                                  ));
                        let o = document.getElementById("ifw5q");
                        o && (o.innerHTML = s.current_queue_pos);
                        let n = document.getElementById("i378h");
                        n &&
                            (remainTime < 60
                                ? (n.innerHTML = "Few Seconds left")
                                : (n.innerHTML =
                                      Math.round(remainTime / 60) + " mins"));
                    }
                    browserDataGloble = e;
                    var a = 55e3,
                        u = parseInt(getCookie("refreshAjax"));
                    u && ((a -= u), deleteCookie("refreshAjax")),
                        setTimeout(async function () {
                            await executeQueueOp(e);
                        }, a);
                } else
                    deleteCookie("qProcessOp"),
                        deleteCookie("preQueue"),
                        deleteCookie("checkByepassStatus"),
                        deleteCookie("qSessionId"),
                        console.error("Request failed with status:", t.status);
            }
        });
    var i = await getFingerPrintId();
    t.send(JSON.stringify({ ...e, deviceid: i }));
}
async function executeQueueOpByPass(e) {
    var t = new XMLHttpRequest();
    t.open("POST", BASE_URL + "q-operations", !0),
        t.setRequestHeader("Content-Type", "application/json"),
        (t.onreadystatechange = function () {
            if (t.readyState === XMLHttpRequest.DONE) {
                if (200 === t.status) {
                    var i = t.responseText,
                        s = JSON.parse(i.substring(i.indexOf("{")));
                    if (0 === s.status) return !1;
                    if (2 == s.status) checkBypassCodeStatus(recursive_data);
                    else if (4 == s.status) {
                        var r = getCookies();
                        !0 !== r.preQueue && setCookie("preQueue", !0, 30);
                    } else if (
                        1 == s.status ||
                        6 == s.status ||
                        10 == s.status
                    ) {
                        if (!1 === s.qProcessOp) {
                            deleteCookie("qProcessOp"),
                                deleteCookie("preQueue"),
                                deleteCookie("checkByepassStatus"),
                                deleteCookie("qSessionId");
                            var r = getCookies();
                            !0 !== r.preQueue &&
                                (setCookie("same_target_flag", !0, 30),
                                deleteCookie("refreshAjax"),
                                deleteCookie("progressWidth"));
                        }
                        return (
                            setTimeout(async function () {
                                !1 !== s.redirectionUrl &&
                                    (window.location.href = s.redirectionUrl);
                            }, 55e3),
                            !0
                        );
                    } else s.cname && (window.location.href = s.cname);
                    setTimeout(async function () {
                        await executeQueueOpByPass(e);
                    }, 55e3);
                } else
                    deleteCookie("qProcessOp"),
                        deleteCookie("preQueue"),
                        deleteCookie("checkByepassStatus"),
                        deleteCookie("qSessionId"),
                        console.error("Request failed with status:", t.status);
            }
        }),
        t.send(JSON.stringify(e));
}
async function checkBypassCodeStatus(e) {
    var t = new XMLHttpRequest();
    t.open("POST", BASE_URL + "check-bypass-code-status", !0),
        t.setRequestHeader("Content-Type", "application/json"),
        (t.onreadystatechange = function () {
            if (t.readyState === XMLHttpRequest.DONE) {
                if (200 === t.status) {
                    var i = t.responseText;
                    1 == JSON.parse(i.substring(i.indexOf("{"))).status
                        ? executeQueueOp(e)
                        : setTimeout(async function () {
                              await checkBypassCodeStatus(e);
                          }, 55e3);
                } else console.error("Request failed with status:", t.status);
            }
        }),
        t.send(JSON.stringify(e));
}
document.addEventListener("DOMContentLoaded", async () => {
    var e = document.querySelector("script[data-intercept]");
    if (e) {
        var t,
            i = getCookie("qSessionId"),
            s = getCookie("preQueue"),
            r = getCookie("checkByepassStatus"),
            o = {
                domain: e.dataset.interceptDomain,
                intercept: e.dataset.intercept,
                cid: e.dataset.c,
                dataCall: e.dataset.call,
            };
        if (r && i)
            await checkBypassCodeStatus({ session_id: i, scriptAttributes: o });
        else if (getCookie("qProcessOp") && i)
            s && i
                ? await executeQueueOpByPass({
                      session_id: i,
                      scriptAttributes: o,
                  })
                : await executeQueueOp({ session_id: i, scriptAttributes: o });
        else if (s && i)
            await executeQueueOpByPass({ session_id: i, scriptAttributes: o });
        else {
            deleteCookie("qProcessOp"),
                deleteCookie("preQueue"),
                deleteCookie("checkByepassStatus"),
                deleteCookie("qSessionId");
            let n = generateSessionId();
            setCookie("qSessionId", n, 30), await executeScript(o);
        }
        let a = document.documentElement.innerHTML;
        showForcePopup(a);
    } else
        console.error(
            "Script element with data-intercept attribute not found."
        );
}),
    (window.onload = function () {
        ProgressBar();
    });
 